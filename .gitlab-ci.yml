stages:
  - lint
  - test
  - build
  - release
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .cache/pip
    - venv/
    - .mypy_cache/

job-lint:
  stage: lint
  image: python:3.11
  before_script:
    - python -m pip install --upgrade pip
    - pip install ruff mypy
  script:
    - ruff check .
    - ruff format --check .
    - mypy . || echo "mypy failed"
  allow_failure: true
  cache:
    policy: pull

job-test:
  stage: test
  image: python:3.11
  before_script:
    - python -m pip install --upgrade pip
    - pip install pytest pytest-cov
  script:
    - pytest --cov=. --cov-report=xml:coverage.xml --cov-report=term --junitxml=report.xml tests/
  artifacts:
    when: always
    paths:
      - coverage.xml
      - report.xml
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  coverage: '/^TOTAL.+?(\d+%)$/'
  cache:
    policy: pull-push

job-build:
  stage: build
  image: docker:24.0
  services:
    - docker:24.0-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  rules:
    - if: $CI_COMMIT_BRANCH
  cache:
    policy: pull

job-release:
  stage: release
  image: docker:24.0
  services:
    - docker:24.0-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    # Строгая проверка формата тега (только X.Y.Z)
    - |
      if [[ ! "$CI_COMMIT_TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
        echo "ERROR: Tag $CI_COMMIT_TAG doesn't follow strict SemVer format (X.Y.Z)"
        echo "Example of valid tag: 1.0.0"
        exit 1
      fi
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  rules:
    # Job будет запускаться только для тегов, строго соответствующих X.Y.Z
    - if: '$CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.[0-9]+$/'
      when: on_success
    - when: never

job-deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client rsync docker-cli
    - mkdir -p ~/.ssh
    - echo "$SERVICE_SSH_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n  StrictHostKeyChecking no" > ~/.ssh/config
  script:
    - if [ -z "$SERVICE_SSH_KEY" ]; then echo "SERVICE_SSH_KEY is empty"; exit 1; fi
    - ssh -i ~/.ssh/id_rsa $SERVICE_SSH_USER@$SERVICE_HOSTNAME "mkdir -p $SERVICE_FOLDER_PATH"
    - ssh -i ~/.ssh/id_rsa $SERVICE_SSH_USER@$SERVICE_HOSTNAME "echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY"
    - apk add --no-cache py3-pip
    - pip install yq
    - yq e ".services.*.image = \"$CI_REGISTRY_IMAGE:$CI_COMMIT_TAG\"" docker-compose.yml > docker-compose.tmp.yml
    - mv docker-compose.tmp.yml docker-compose.yml
    - rsync -avz -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" docker-compose.yml $SERVICE_SSH_USER@$SERVICE_HOSTNAME:$SERVICE_FOLDER_PATH/
    - ssh -i ~/.ssh/id_rsa $SERVICE_SSH_USER@$SERVICE_HOSTNAME "cd $SERVICE_FOLDER_PATH && docker compose pull && docker compose up -d --force-recreate"
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
  dependencies:
    - job-release